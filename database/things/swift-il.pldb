title SIL
standsFor Swift Intermediate Language
appeared 2012
type ir
related cir llvmir
description SIL is an SSA-form IR with high-level semantic information designed to implement the Swift programming language. In contrast to LLVM IR, SIL is a generally target-independent format representation that can be used for code distribution, but it can also express target-specific concepts as well as LLVM can.

website https://github.com/apple/swift/blob/master/docs/SIL.rst
status historical
fileExtensions sil
fileType text
corporateDevelopers Apple
centralPackageRepositoryCount 0

description 

lineCommentKeyword //
example
 // SIL is reliant on Swift's type system and declarations, so SIL syntax is an extension of Swift's. A .sil file is a Swift source file with added SIL definitions. The Swift source is parsed only for its declarations; Swift func bodies (except for nested declarations) and top-level code are ignored by the SIL parser. In a .sil file, there are no implicit imports; the swift and/or Builtin standard modules must be imported explicitly if used.
 sil_stage canonical
 
 import Swift
 
 // Define types used by the SIL function.
 
 struct Point {
   var x : Double
   var y : Double
 }
 
 class Button {
   func onClick()
   func onMouseDown()
   func onMouseUp()
 }
 
 // Declare a Swift function. The body is ignored by SIL.
 func taxicabNorm(_ a:Point) -> Double {
   return a.x + a.y
 }
 
 // Define a SIL function.
 // The name @_T5norms11taxicabNormfT1aV5norms5Point_Sd is the mangled name
 // of the taxicabNorm Swift function.
 sil @_T5norms11taxicabNormfT1aV5norms5Point_Sd : $(Point) -> Double {
 bb0(%0 : $Point):
   // func Swift.+(Double, Double) -> Double
   %1 = function_ref @_Tsoi1pfTSdSd_Sd
   %2 = struct_extract %0 : $Point, #Point.x
   %3 = struct_extract %0 : $Point, #Point.y
   %4 = apply %1(%2, %3) : $(Double, Double) -> Double
   return %4 : Double
 }
 
 // Define a SIL vtable. This matches dynamically-dispatched method
 // identifiers to their implementations for a known static class type.
 sil_vtable Button {
   #Button.onClick: @_TC5norms6Button7onClickfS0_FT_T_
   #Button.onMouseDown: @_TC5norms6Button11onMouseDownfS0_FT_T_
   #Button.onMouseUp: @_TC5norms6Button9onMouseUpfS0_FT_T_
 }
patterns
 hasLineComments? true
  // A comment
dblp https://dblp.org/search?q=$SIL$
 hits 41
 publications
  title|year|doi|url
  SIL analysis of subsea control system components based on a typical OREDA database.|2021|10.1002/QRE.2909|https://dblp.org/rec/journals/qre/Mahmoudi21
  Real-time SIL Emulation Architecture for Cooperative Automated Vehicles.|2021||https://dblp.org/rec/journals/corr/abs-2112-07586
  Robotic manipulator control based on an optimal fractional-order fuzzy PID approach: SiL real-time simulation.|2020|10.1007/S00500-019-04152-7|https://dblp.org/rec/journals/soco/ArdeshiriKNVR20
  Software Fault Insertion Testing for SIL Certification of Safety PLC-Based System.|2020|10.1109/DESSERT50317.2020.9125006|https://dblp.org/rec/conf/dessert/OdarushchenkoSL20
  ODRE Workshop: Using SIL Arithmetic to Design Safe and Secure Systems.|2020|10.1109/ISORC49007.2020.00044|https://dblp.org/rec/conf/isorc/MenonIK20
  Safety and Security Integrated SIL Evaluation Using the NFR Approach.|2020|10.1007/978-3-030-26574-8_5|https://dblp.org/rec/series/sci/SubramanianZ20
  Developments in SIL determination and calculation.|2018|10.1016/J.RESS.2018.04.028|https://dblp.org/rec/journals/ress/GabrielOS18
  Scheduled smooth MIMO robust control of aircraft verified through blade element SIL testing.|2018|10.1177/0142331216661760|https://dblp.org/rec/journals/tinstmc/Kasnakoglu18
  SiL: An Approach for Adjusting Applications to Heterogeneous Systems Under Perturbations.|2018|10.1007/978-3-030-10549-5_36|https://dblp.org/rec/conf/europar/MohammedC18
  SiL: An Approach for Adjusting Applications to Heterogeneous Systems Under Perturbations.|2018||https://dblp.org/rec/journals/corr/abs-1807-03577