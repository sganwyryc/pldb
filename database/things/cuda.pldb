title CUDA
appeared 2007
type pl

wikipedia https://en.wikipedia.org/wiki/CUDA
 example
  import numpy
  from pycublas import CUBLASMatrix
  A = CUBLASMatrix( numpy.mat([[1,2,3]],[[4,5,6]],numpy.float32) )
  B = CUBLASMatrix( numpy.mat([[2,3]],[4,5],[[6,7]],numpy.float32) )
  C = A*B
  print C.np_mat()
 related linux c fortran opengl opencl llvmir python perl java ruby lua haskell r matlab idl mathematica common-lisp f-sharp
 summary CUDA is a parallel computing platform and application programming interface (API) model created by Nvidia. It allows software developers and software engineers to use a CUDA-enabled graphics processing unit (GPU) for general purpose processing – an approach termed GPGPU (General-Purpose computing on Graphics Processing Units). The CUDA platform is a software layer that gives direct access to the GPU's virtual instruction set and parallel computational elements, for the execution of compute kernels. The CUDA platform is designed to work with programming languages such as C, C++, and Fortran. This accessibility makes it easier for specialists in parallel programming to use GPU resources, in contrast to prior APIs like Direct3D and OpenGL, which required advanced skills in graphics programming. Also, CUDA supports programming frameworks such as OpenACC and OpenCL. When it was first introduced by Nvidia, the name CUDA was an acronym for Compute Unified Device Architecture, but Nvidia subsequently dropped the use of the acronym.
 pageId 7933386
 dailyPageViews 1966
 created 2006
 backlinksCount 444
 revisionCount 1315
 appeared 2007

githubLanguage Cuda
 fileExtensions cu cuh
 trendingProjects
  author name avatar url language languageColor stars forks currentPeriodStars description
  rapidsai cudf https://github.com/rapidsai.png https://github.com/rapidsai/cudf Cuda #3A4E3A 1931 274 187 "cuDF - GPU DataFrame Library"
  DeepGraphLearning graphvite https://github.com/DeepGraphLearning.png https://github.com/DeepGraphLearning/graphvite Cuda #3A4E3A 433 47 285 "A general and high-performance graph embedding system for various applications"
 trendingProjectsCount 3

helloWorldCollection Compute Unified Device Architecture
 // Hello world in CUDA
 
 #include <stdio.h>
  
 const int N = 16; 
 const int blocksize = 16; 
  
 __global__ 
 void hello(char *a, int *b) 
 {
 	a[threadIdx.x] += b[threadIdx.x];
 }
  
 int main()
 {
 	char a[N] = "Hello \0\0\0\0\0\0";
 	int b[N] = {15, 10, 6, 0, -11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  
 	char *ad;
 	int *bd;
 	const int csize = N*sizeof(char);
 	const int isize = N*sizeof(int);
  
 	printf("%s", a);
  
 	cudaMalloc( (void**)&ad, csize ); 
 	cudaMalloc( (void**)&bd, isize ); 
 	cudaMemcpy( ad, a, csize, cudaMemcpyHostToDevice ); 
 	cudaMemcpy( bd, b, isize, cudaMemcpyHostToDevice ); 
 	
 	dim3 dimBlock( blocksize, 1 );
 	dim3 dimGrid( 1, 1 );
 	hello<<<dimGrid, dimBlock>>>(ad, bd);
 	cudaMemcpy( a, ad, csize, cudaMemcpyDeviceToHost ); 
 	cudaFree( ad );
 	cudaFree( bd );
 	
 	printf("%s\n", a);
 	return EXIT_SUCCESS;
 }

linguistGrammarRepo https://github.com/harrism/sublimetext-cuda-cpp
 firstCommit 2012
 lastCommit 2017
 committerCount 3
 commitCount 25
 sampleCount 2
 example
  #include <stdio.h>
  #include <cuda_runtime.h>
  
  /**
   * CUDA Kernel Device code
   *
   * Computes the vector addition of A and B into C. The 3 vectors have the same
   * number of elements numElements.
   */
  __global__ void
  vectorAdd(const float *A, const float *B, float *C, int numElements)
  {
      int i = blockDim.x * blockIdx.x + threadIdx.x;
  
      if (i < numElements)
      {
          C[i] = A[i] + B[i];
      }
  }
  
  /**
   * Host main routine
   */
  int
  main(void)
  {
      // Error code to check return values for CUDA calls
      cudaError_t err = cudaSuccess;
  
      // Launch the Vector Add CUDA Kernel
      int threadsPerBlock = 256;
      int blocksPerGrid =(numElements + threadsPerBlock - 1) / threadsPerBlock;
      vectorAdd<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, numElements);
      err = cudaGetLastError();
  
      if (err != cudaSuccess)
      {
          fprintf(stderr, "Failed to launch vectorAdd kernel (error code %s)!\n", cudaGetErrorString(err));
          exit(EXIT_FAILURE);
      }
  
      // Reset the device and exit
      err = cudaDeviceReset();
  
      return 0;
  }

website https://developer.nvidia.com/cuda-zone
standsFor Compute Unified Device Architecture
status active
fileType text
isOpenSource true

meetup cuda
 memberCount 9400
 groupCount 32

linkedInSkill cuda
 2018 28572
corporateDevelopers Nvidia
indeedJobs cuda engineer
 2017 483
centralPackageRepositoryCount 0
goodreads
 title|year|author|goodreadsId|rating|ratings|reviews
 Cuda by Example: An Introduction to General-Purpose Gpu Programming|2010|Jason Sanders|12911195|4.03|131|13
 Professional Cuda C Programming|2014|John Cheng|39965022|4.14|7|0
dblp https://dblp.org/search?q=$CUDA$
 hits 987
 publications
  title|year|doi|url
  Multi-GPU implementation of a time-explicit finite volume solver using CUDA and a CUDA-Aware version of OpenMPI with application to shallow water flows.|2022|10.1016/J.CPC.2021.108190|https://dblp.org/rec/journals/cphysics/DelmasS22
  CUDA Tutorial - Cryptanalysis of Classical Ciphers Using Modern GPUs and CUDA.|2021||https://dblp.org/rec/journals/corr/abs-2103-13937
  GSGP-CUDA - a CUDA framework for Geometric Semantic Genetic Programming.|2021||https://dblp.org/rec/journals/corr/abs-2106-04034
  CUDA Flux: A Lightweight Instruction Profiler for CUDA Applications.|2019|10.1109/PMBS49563.2019.00014|https://dblp.org/rec/conf/sc/BraunF19
  基于CUDA的k-means算法并行化研究 (Study on Parallel K-means Algorithm Based on CUDA).|2018|10.11896/J.ISSN.1002-137X.2018.11.047|https://dblp.org/rec/journals/jsjkx/LiuZSL18
  基于CUDA架构的改进Marching Cubes算法 (Improved Marching Cubes Based on CUDA).|2018||https://dblp.org/rec/journals/jsjkx/ZhouJ18a
  RT-CUDA: A Software Tool for CUDA Code Restructuring.|2017|10.1007/S10766-016-0433-6|https://dblp.org/rec/journals/ijpp/KhanAAA17
  CUDA-on-CL: a compiler and runtime for running NVIDIA® CUDA™ C++11 applications on OpenCL™ 1.2 Devices.|2017|10.1145/3078155.3078156|https://dblp.org/rec/conf/iwocl/Perkins17
  基于CUDA的并行K-近邻连接算法实现 (Implementation of Parallel K-Nearest Neighbor Join Algorithm Based on CUDA).|2016|10.11896/J.ISSN.1002-137X.2016.10.035|https://dblp.org/rec/journals/jsjkx/PanZC16
  CUDA Leaks: A Detailed Hack for CUDA and a (Partial) Fix.|2016|10.1145/2801153|https://dblp.org/rec/journals/tecs/PietroLV16