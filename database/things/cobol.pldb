title COBOL
appeared 1959
type pl

standsFor COmmon Business Oriented Language
patterns
 hasPointers? true
 hasComments? true
 hasZeroBasedNumbering? false
 hasLineComments? true
  MOVE ABC to XYZ  *> This is a comment.

wikipedia https://en.wikipedia.org/wiki/COBOL
 example
  19.52.48 JOB    3  $HASP100 COBUCLG  ON READER1     COBOL BASE TEST
      19.52.48 JOB    3  IEF677I WARNING MESSAGE(S) FOR JOB COBUCLG  ISSUED
      19.52.48 JOB    3  $HASP373 COBUCLG  STARTED - INIT  1 - CLASS A - SYS BSP1
      19.52.48 JOB    3  IEC130I SYSPUNCH DD STATEMENT MISSING
      19.52.48 JOB    3  IEC130I SYSLIB   DD STATEMENT MISSING
      19.52.48 JOB    3  IEC130I SYSPUNCH DD STATEMENT MISSING
      19.52.48 JOB    3  IEFACTRT - Stepname  Procstep  Program   Retcode
      19.52.48 JOB    3  COBUCLG    BASETEST  COB       IKFCBL00  RC= 0000
      19.52.48 JOB    3  COBUCLG    BASETEST  LKED      IEWL      RC= 0000
      19.52.48 JOB    3  +HELLO, WORLD
      19.52.48 JOB    3  COBUCLG    BASETEST  GO        PGM=*.DD  RC= 0000
      19.52.48 JOB    3  $HASP395 COBUCLG  ENDED
 related comtran eiffel flow-matic smalltalk pl-i plb algol-58 fact algol unicode xml unix visual-basic-dot-net utf-8 jcl pascal
 summary COBOL (, an acronym for common business-oriented language) is a compiled English-like computer programming language designed for business use. It is imperative, procedural and, since 2002, object-oriented. COBOL is primarily used in business, finance, and administrative systems for companies and governments. COBOL is still widely used in legacy applications deployed on mainframe computers, such as large-scale batch and transaction processing jobs. But due to its declining popularity and the retirement of experienced COBOL programmers, programs are being migrated to new platforms, rewritten in modern languages or replaced with software packages. Most programming in COBOL is now purely to maintain existing applications. COBOL was designed in 1959 by CODASYL and was partly based on previous programming language design work by Grace Hopper, commonly referred to as "the (grand)mother of COBOL". It was created as part of a US Department of Defense effort to create a portable programming language for data processing. Intended as a stopgap, the Department of Defense promptly forced computer manufacturers to provide it, resulting in its widespread adoption. It was standardized in 1968 and has since been revised four times. Expansions include support for structured and object-oriented programming. The current standard is ISO/IEC 1989:2014. COBOL has an English-like syntax, which was designed to be self-documenting and highly readable. However, it is verbose and uses over 300 reserved words. In contrast with modern, succinct syntax like y = x;, COBOL has a more English-like syntax (in this case, MOVE x TO y). COBOL code is split into four divisions (identification, environment, data and procedure) containing a rigid hierarchy of sections, paragraphs and sentences. Lacking a large standard library, the standard specifies 43 statements, 87 functions and just one class. Academic computer scientists were generally uninterested in business applications when COBOL was created and were not involved in its design; it was (effectively) designed from the ground up as a computer language for business, with an emphasis on inputs and outputs, whose only data types were numbers and strings of text. COBOL has been criticized throughout its life, however, for its verbosity, design process and poor support for structured programming, which resulted in monolithic and incomprehensible programs.
 pageId 6799
 dailyPageViews 1302
 created 2001
 backlinksCount 1151
 revisionCount 2255
 appeared 1959
 fileExtensions cbl cob cpy

githubLanguage COBOL
 fileExtensions cob cbl ccp cobol cpy
 trendingProjectsCount 0

helloWorldCollection COBOL
        * Hello World in COBOL
 
 *****************************
 IDENTIFICATION DIVISION.
 PROGRAM-ID. HELLO.
 ENVIRONMENT DIVISION.
 DATA DIVISION.
 PROCEDURE DIVISION.
 MAIN SECTION.
 DISPLAY "Hello World!"
 STOP RUN.
 ****************************

linguistGrammarRepo https://bitbucket.org/bitlang/sublime_cobol
 firstCommit 2013
 lastCommit 2018
 committerCount 6
 commitCount 94
 sampleCount 4
 example
          program-id. hello.
          procedure division.
          display "Hello, World!".
          stop run.
  
  

status active
country US
fileExtensions cbl cob cpy
fileType text

tiobe COBOL
 currentRank 25

meetup cobol
 memberCount 123
 groupCount 4

linkedInSkill cobol
 2018 177803

projectEuler COBOL
 memberCount
  2019 34
  2022 39

hopl 139

subreddit cobol
 memberCount
  2017 715
  2022 2605

quineRelay Cobol

ubuntuPackage open-cobol

codeMirror cobol

rosettaCode COBOL

lineCommentKeyword *>

indeedJobs cobol developer
 2017 838
keywords ACCEPT ACCESS ADD ADDRESS ADVANCING AFTER ALL ALPHABET ALPHABETIC ALPHABETIC-LOWER ALPHABETIC-UPPER ALPHANUMERIC ALPHANUMERIC-EDITED ALSO ALTER ALTERNATE AND ANY APPLY ARE AREA AREAS ASCENDING ASSIGN AT AUTHOR BASIS BEFORE BEGINNING BINARY BLANK BLOCK BOTTOM BY CALL CANCEL CBL CD CF CH CHARACTER CHARACTERS CLASS CLASS-ID CLOCK-UNITS CLOSE COBOL CODE CODE-SET COLLATING COLUMN COM-REG COMMA COMMON COMMUNICATION COMP COMP-1 COMP-2 COMP-3 COMP-4 COMP-5 COMPUTATIONAL COMPUTATIONAL-1 COMPUTATIONAL-2 COMPUTATIONAL-3 COMPUTATIONAL-4 COMPUTATIONAL-5 COMPUTE CONFIGURATION CONTAINS CONTENT CONTINUE CONTROL CONTROLS CONVERTING COPY CORR CORRESPONDING COUNT CURRENCY DATA DATE-COMPILED DATE-WRITTEN DAY DAY-OF-WEEK DBCS DE DEBUG-CONTENTS DEBUG-ITEM DEBUG-LINE DEBUG-NAME DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3 DEBUGGING DECIMAL-POINT DECLARATIVES DELETE DELIMITED DELIMITER DEPENDING DESCENDING DESTINATION DETAIL DISPLAY DISPLAY-1 DIVIDE DIVISION DOWN DUPLICATES DYNAMIC EGCS EGI EJECT ELSE EMI ENABLE END END-ADD END-CALL END-COMPUTE END-DELETE END-DIVIDE END-EVALUATE END-IF END-INVOKE END-MULTIPLY END-OF-PAGE END-PERFORM END-READ END-RECEIVE END-RETURN END-REWRITE END-SEARCH END-START END-STRING END-SUBTRACT END-UNSTRING END-WRITE ENDING ENTER ENTRY ENVIRONMENT EOP EQUAL ERROR ESI EVALUATE EVERY EXCEPTION EXIT EXTEND EXTERNAL FALSE FD FILE FILE-CONTROL FILLER FINAL FIRST FOOTING FOR FROM FUNCTION GENERATE GIVING GLOBAL GO GOBACK GREATER GROUP HEADING HIGH-VALUE HIGH-VALUES I-O I-O-CONTROL ID IDENTIFICATION IF IN INDEX INDEXED INDICATE INHERITS INITIAL INITIALIZE INITIATE INPUT INPUT-OUTPUT INSERT INSPECT INSTALLATION INTO INVALID INVOKE IS JUST JUSTIFIED KANJI KEY LABEL LAST LEADING LEFT LENGTH LESS LIMIT LIMITS LINAGE LINAGE-COUNTER LINE LINE-COUNTER LINES LINKAGE LOCAL-STORAGE LOCK LOW-VALUE LOW-VALUES MEMORY MERGE MESSAGE METACLASS METHOD METHOD-ID MODE MODULES MORE-LABELS MOVE MULTIPLE MULTIPLY NATIVE NATIVE_BINARY NEGATIVE NEXT NO NOT NULL NULLS NUMBER NUMERIC NUMERIC-EDITED OBJECT OBJECT-COMPUTER OCCURS OF OFF OMITTED ON OPEN OPTIONAL OR ORDER ORGANIZATION OTHER OUTPUT OVERFLOW OVERRIDE PACKED-DECIMAL PADDING PAGE PAGE-COUNTER PASSWORD PERFORM PF PH PIC PICTURE PLUS POINTER POSITION POSITIVE PRINTING PROCEDURE PROCEDURE-POINTER PROCEDURES PROCEED PROCESSING PROGRAM PROGRAM-ID PURGE QUEUE QUOTE QUOTES RANDOM RD READ READY RECEIVE RECORD RECORDING RECORDS RECURSIVE REDEFINES REEL REFERENCE REFERENCES RELATIVE RELEASE RELOAD REMAINDER REMOVAL RENAMES REPLACE REPLACING REPORT REPORTING REPORTS REPOSITORY RERUN RESERVE RESET RETURN RETURN-CODE RETURNING REVERSED REWIND REWRITE RF RH RIGHT ROUNDED RUN SAME SD SEARCH SECTION SECURITY SEGMENT SEGMENT-LIMIT SELECT SELF SEND SENTENCE SEPARATE SEQUENCE SEQUENTIAL SERVICE SET SHIFT-IN SHIFT-OUT SIGN SIZE SKIP1 SKIP2 SKIP3 SORT SORT-CONTROL SORT-CORE-SIZE SORT-FILE-SIZE SORT-MERGE SORT-MESSAGE SORT-MODE-SIZE SORT-RETURN SOURCE SOURCE-COMPUTER SPACE SPACES SPECIAL-NAMES STANDARD STANDARD-1 STANDARD-2 START STATUS STOP STRING SUB-QUEUE-1 SUB-QUEUE-2 SUB-QUEUE-3 SUBTRACT SUM SUPER SUPPRESS SYMBOLIC SYNC SYNCHRONIZED TABLE TALLY TALLYING TAPE TERMINAL TERMINATE TEST TEXT THAN THEN THROUGH THRU TIME TIMES TITLE TO TOP TRACE TRAILING TRUE TYPE UNIT UNSTRING UNTIL UP UPON USAGE USE USING VALUE VALUES VARYING WHEN WHEN-COMPILED WITH WORDS WORKING-STORAGE WRITE WRITE-ONLY ZERO ZEROES ZEROS
stackOverflowSurvey
 2021
  users 437
  medianSalary 52340
  fans 309
  percentageUsing 0.01
centralPackageRepositoryCount 0
rijuRepl https://riju.codes/cobol
 example
  IDENTIFICATION DIVISION.
  PROGRAM-ID. MAIN.
  PROCEDURE DIVISION.
      DISPLAY "Hello, world!".
      STOP RUN.
  
 description Compiled English-like computer programming language designed for business use
 fileExtensions cbl cob cpy
 githubRepo https://sourceforge.net/p/gnucobol/_list/svn
goodreads
 title|year|author|goodreadsId|rating|ratings|reviews
 Cobol Programming|1983|M.K. Roy|4944251|4.11|9|1
 Structured Cobol Programming|1979|Nancy B. Stern|9030220|4.33|15|0
 DB2 for the COBOL Programmer, Part 1|1998|Curtis Garvin|2637661|3.58|12|1
 IMS for the COBOL Programmer: Database Processing with DL/I|1985|Steve Eckols|2866873|4.12|33|3
 Murach's CICS for the COBOL Programmer|2001|Raul Menendez|1002732|3.96|25|1
 Vsam For The Cobol Programmer: Concepts, Cobol, Jcl, Idcams|1982|Doug Lowe|1555249|2.60|5|1
 DB2 for the COBOL Programmer|1999|Curtis Garvin|1458408|4.17|6|1
 Cobol Programming A Complete Course In Writing Cobol Programs|1972|John Watters|5144775|2.00|4|0
 DB2 for the COBOL Programmer: An Introductory Course|1991|Steve Eckols|2866874|4.11|9|0
 COBOL for Dummies [With One/Cheatsheet]|1997|Arthur Griffith|2386608|2.33|3|0