title ACL2
appeared 1990
type pl

patterns
 hasComments? true

wikipedia https://en.wikipedia.org/wiki/ACL2
 related common-lisp axiom
 summary ACL2 (A Computational Logic for Applicative Common Lisp) is a software system consisting of a programming language, an extensible theory in a first-order logic, and an automated theorem prover.  ACL2 is designed to support automated reasoning in inductive logical theories, mostly for the purpose of software and hardware verification.  The input language and implementation of ACL2 are built on Common Lisp.  ACL2 is free, open source (BSD license) software. The ACL2 programming language is an applicative (side-effect free) variant of Common Lisp.  ACL2 is untyped. All ACL2 functions are total — that is, every function maps each object in the ACL2 universe to another object in its universe. ACL2's base theory axiomatizes the semantics of its programming language and its built-in functions.  User definitions in the programming language that satisfy a definitional principle extend the theory in a way that maintains the theory's logical consistency. The core of ACL2's theorem prover is based on term rewriting, and this core is extensible in that user-discovered theorems can be used as ad-hoc proof techniques for subsequent conjectures. ACL2 is intended to be an "industrial strength" version of the Boyer–Moore theorem prover, NQTHM.  Toward this goal, ACL2 has many features to support clean engineering of interesting mathematical and computational theories.  ACL2 also derives efficiency from being built on Common Lisp; for example, the same specification that is the basis for inductive verification can be compiled and run natively. In 2005, the authors of the Boyer-Moore family of provers, which includes ACL2, received the ACM Software System Award "for pioneering and engineering a most effective theorem prover (...) as a formal methods tool for verifying safety-critical hardware and software."
 pageId 162049
 created 2002
 backlinksCount 72
 revisionCount 124
 dailyPageViews 35
 appeared 1990

standsFor A Computational Logic for Applicative Common Lisp
status historical
country US
fileType text
isOpenSource true

hopl 6972

rosettaCode ACL2

centralPackageRepositoryCount 0
creators Robert S. Boyer and J Strother Moore
goodreads
 title|year|author|goodreadsId|rating|ratings|reviews
 Computer-Aided Reasoning: Acl2 Case Studies|2000|Matt Kaufmann|13910610|4.00|1|0
dblp https://dblp.org/search?q=$ACL2$
 hits 142
 publications
  title|year|doi|url
  A Simple Java Code Generator for ACL2 Based on a Deep Embedding of ACL2 in Java.|2018|10.4204/EPTCS.280.1|https://dblp.org/rec/journals/corr/abs-1810-04308
  ACL2(ml): Machine-Learning for ACL2.|2014|10.4204/EPTCS.152.5|https://dblp.org/rec/journals/corr/HerasK14b
  ACL2 Meets the GPU: Formalizing a CUDA-based Parallelizable All-Pairs Shortest Path Algorithm in ACL2|2013|10.4204/EPTCS.114.10|https://dblp.org/rec/journals/corr/abs-1304-7863
  Proceedings International Workshop on the ACL2 Theorem Prover and its Applications, ACL2 2013, Laramie, Wyoming, USA, May 30-31, 2013.|2013|10.4204/EPTCS.114|https://dblp.org/rec/journals/corr/abs-1304-7123
  How Can I Do That with ACL2? Recent Enhancements to ACL2|2011|10.4204/EPTCS.70.4|https://dblp.org/rec/journals/corr/abs-1110-4673
  Proceedings 10th International Workshop on the ACL2 Theorem Prover and its Applications, ACL2 2011, Austin, Texas, USA, November 3-4, 2011.|2011|10.4204/EPTCS.70|https://dblp.org/rec/journals/corr/abs-1110-4473
  Proceedings of the Sixth International Workshop on the ACL2 Theorem Prover and its Applications, ACL2 2006, Seattle, Washington, USA, August 15-16, 2006|2006||https://dblp.org/rec/conf/acl2/2006
  A Complex Java Code Generator for ACL2 Based on a Shallow Embedding of ACL2 in Java.|2022|10.48550/ARXIV.2205.11707|https://dblp.org/rec/journals/corr/abs-2205-11707
  A Proof-Generating C Code Generator for ACL2 Based on a Shallow Embedding of C in ACL2.|2022|10.48550/ARXIV.2205.11708|https://dblp.org/rec/journals/corr/abs-2205-11708
  Formal Verification of Arithmetic RTL: Translating Verilog to C++ to ACL2.|2020|10.4204/EPTCS.327.1|https://dblp.org/rec/journals/corr/abs-2009-13761