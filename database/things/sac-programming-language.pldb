title SAC
appeared 1994
type pl

wikipedia https://en.wikipedia.org/wiki/SAC_programming_language
 related sisal c haskell nesl nial fortran
 summary SAC (Single Assignment C) is a strict purely functional programming language whose design is focused on the needs of numerical applications. Emphasis is laid on efficient support for array processing. Efficiency concerns are essentially twofold. On the one hand, efficiency in program development is to be improved by the opportunity to specify array operations on a high level of abstraction. On the other hand, efficiency in program execution, i.e. the runtime performance of programs, in time and memory consumption, is still to be achieved by sophisticated compilation schemes. Only as far as the latter succeeds, the high-level style of specifications can actually be called useful. To facilitate compiling to efficiently executable code, certain functional language features which are not considered essential for numerical applications, e.g. higher-order functions, polymorphism, or lazy evaluation, are not (yet) supported by SAC. These may be found in general-purpose functional languages, e.g. Haskell, Clean, Miranda, or ML. To overcome the acceptance problems encountered by other functional or array based languages intended for numerical / array intensive applications, e.g. SISAL, NESL, Nial, APL, J, or K, particular regard is paid to ease the transition from a C / Fortran like programming environment to SAC. In more detail, the basic language design goals of SAC are to:  provide a purely functional language with a syntax very similar to that of C in order to ease, for a large community of programmers, the transition from an imperative to a functional programming style; support multi-dimensional arrays as first class objects; allow the specification of shape- and dimension-invariant array operations; provide high-level array operations that liberate programming from tedious and error-prone specifications of starts, stops and strides for array traversals thereby improving code reusability and programming productivity, in general. incorporate a module system that allows for separate compilation, separate name spaces, and abstract data types, and, additionally, provides an interface to foreign languages in order to enable reuse of existing code; provide means for a smooth integration of states and state modifications into the functional paradigm based on uniqueness types; use the module system, the foreign language interface, and the integration of states in order to create a standard library which provides a functionality similar to that of the standard C libraries, e.g. powerful I/O facilities or mathematical functions; facilitate the compilation to host machine code which can be efficiently executed both in terms of time and space demand; facilitate the compilation for non-sequential program execution in multiprocessor environments.
 created 2005
 backlinksCount 11
 pageId 2179985
 revisionCount 32
 dailyPageViews 11
 appeared 1994

status historical
isOpenSource false

hopl 4989

centralPackageRepositoryCount 0
creators Sven-Bodo Scholz and Clemens Grelck
dblp https://dblp.org/search?q=$SAC$
 hits 99
 publications
  title|year|doi|url
  SAC &apos;22: The 37th ACM/SIGAPP Symposium on Applied Computing, Virtual Event, April 25 - 29, 2022|2022|10.1145/3477314|https://dblp.org/rec/conf/sac/2022
  Selected Areas in Cryptography - 28th International Conference, SAC 2021, Virtual Event, September 29 - October 1, 2021, Revised Selected Papers|2022|10.1007/978-3-030-99277-4|https://dblp.org/rec/conf/sacrypt/2021
  SAC &apos;21: The 36th ACM/SIGAPP Symposium on Applied Computing, Virtual Event, Republic of Korea, March 22-26, 2021|2021|10.1145/3412841|https://dblp.org/rec/conf/sac/2021
  Selected Areas in Cryptography - SAC 2020 - 27th International Conference, Halifax, NS, Canada (Virtual Event), October 21-23, 2020, Revised Selected Papers|2021|10.1007/978-3-030-81652-0|https://dblp.org/rec/conf/sacrypt/2020
  SAC &apos;20: The 35th ACM/SIGAPP Symposium on Applied Computing, online event, [Brno, Czech Republic], March 30 - April 3, 2020|2020|10.1145/3341105|https://dblp.org/rec/conf/sac/2020
  Selected Areas in Cryptography - SAC 2019 - 26th International Conference, Waterloo, ON, Canada, August 12-16, 2019, Revised Selected Papers|2020|10.1007/978-3-030-38471-5|https://dblp.org/rec/conf/sacrypt/2019
  Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing, SAC 2019, Limassol, Cyprus, April 8-12, 2019|2019|10.1145/3297280|https://dblp.org/rec/conf/sac/2019
  Selected Areas in Cryptography - SAC 2018 - 25th International Conference, Calgary, AB, Canada, August 15-17, 2018, Revised Selected Papers|2019|10.1007/978-3-030-10970-7|https://dblp.org/rec/conf/sacrypt/2018
  基于SAC的特征选择算法 (Feature Selection Algorithm Using SAC Algorithm).|2018|10.11896/J.ISSN.1002-137X.2018.02.011|https://dblp.org/rec/journals/jsjkx/ZhangL18
  Reliability and failure analysis of SAC 105 and SAC 1205N lead-free solder alloys during drop test events.|2018|10.1016/J.MICROREL.2017.12.013|https://dblp.org/rec/journals/mr/WuL18