title CIL
appeared 2000
type pl

example
 .assembly Hello {}
 .assembly extern mscorlib {}
 .method static void Main()
 {
     .entrypoint
     .maxstack 1
     ldstr "Hello, world!"
     call void [mscorlib]System.Console::WriteLine(string)
     ret
 }

wikipedia https://en.wikipedia.org/wiki/Common_Intermediate_Language
 example
  .method assembly static void modopt([mscorlib]System.Runtime.CompilerServices.CallConvCdecl) 
          test_pointer_operations(int32 param) cil managed
  {
    .vtentry 1 : 1
    // Code size       44 (0x2c)
    .maxstack  2
    .locals ([0] int32* ptr,
             [1] valuetype A* V_1,
             [2] valuetype A* a,
             [3] int32 k)
  // k = 0;
    IL_0000:  ldc.i4.0 
    IL_0001:  stloc.3
  // ptr = &k;
    IL_0002:  ldloca.s   k // load local's address instruction
    IL_0004:  stloc.0
  // *ptr = 1;
    IL_0005:  ldloc.0
    IL_0006:  ldc.i4.1
    IL_0007:  stind.i4 // indirection instruction
  // ptr = &param
    IL_0008:  ldarga.s   param // load parameter's address instruction
    IL_000a:  stloc.0
  // *ptr = 2
    IL_000b:  ldloc.0
    IL_000c:  ldc.i4.2
    IL_000d:  stind.i4
  // a = new A;
    IL_000e:  ldloca.s   a
    IL_0010:  call       valuetype A* modopt([mscorlib]System.Runtime.CompilerServices.CallConvThiscall) 'A.{ctor}'(valuetype A* modopt([mscorlib]System.Runtime.CompilerServices.IsConst) modopt([mscorlib]System.Runtime.CompilerServices.IsConst))
    IL_0015:  pop
  // ptra = &a;
    IL_0016:  ldloca.s   a
    IL_0018:  stloc.1
  // ptra->meth();
    IL_0019:  ldloc.1
    IL_001a:  dup
    IL_001b:  ldind.i4 // reading the VMT for virtual call
    IL_001c:  ldind.i4
    IL_001d:  calli      unmanaged stdcall void modopt([mscorlib]System.Runtime.CompilerServices.CallConvStdcall)(native int)
    IL_0022:  ret
  } // end of method 'Global Functions'::test_pointer_operations
 related cli-assembly assembly-language csharp x86-isa java-bytecode visual-basic-dot-net
 summary Common Intermediate Language (CIL, pronounced either sil or kil), formerly called Microsoft Intermediate Language (MSIL), is the lowest-level human-readable programming language defined by the Common Language Infrastructure (CLI) specification and is used by the .NET Framework and Mono. Languages which target a CLI-compatible runtime environment compile to CIL, which is assembled into an object code that has a bytecode-style format. CIL is an object-oriented assembly language, and is entirely stack-based. Its bytecode is translated into native code or—most commonly—executed by a virtual machine. CIL was originally known as Microsoft Intermediate Language (MSIL) during the beta releases of the .NET languages. Due to standardization of C# and the Common Language Infrastructure, the bytecode is now officially known as CIL.
 pageId 46004
 dailyPageViews 212
 created 2002
 backlinksCount 168
 revisionCount 342
 appeared 2005

aka Microsoft Intermediate Language MSIL
standsFor Common Intermediate Language
status active
fileType text

tiobe CIL

corporateDevelopers Microsoft
centralPackageRepositoryCount 0
rijuRepl https://riju.codes/cil
 example
  .assembly main {}
  .class Main
  {
    .method static void Main() cil managed
    {
      .entrypoint
      ldstr "Hello, world!"
      call void [mscorlib]System.Console::WriteLine(string)
      ret
    }
  }
  
goodreads
 title|year|author|goodreadsId|rating|ratings|reviews
 CIL Programming: Under the Hood of .Net|2002|Jason Bock|253979|3.50|2|0
dblp https://dblp.org/search?q=$CIL$
 hits 26
 publications
  title|year|doi|url
  CIL: Contrastive Instance Learning Framework for Distantly Supervised Relation Extraction.|2021|10.18653/V1/2021.ACL-LONG.483|https://dblp.org/rec/conf/acl/ChenST00Z20
  NH-CIL: A Nested Hierarchy Algorithm for Class Incremental Learning.|2021|10.1109/CSCWD49262.2021.9437731|https://dblp.org/rec/conf/cscwd/LiuW21
  CIL: Contrastive Instance Learning Framework for Distantly Supervised Relation Extraction.|2021||https://dblp.org/rec/journals/corr/abs-2106-10855
  From CIL to Java bytecode: Semantics-based translation for static analysis leveraging.|2020|10.1016/J.SCICO.2020.102392|https://dblp.org/rec/journals/scp/FerraraCS20
  SC2 CIL: Evaluating the Spectrum Voxel Announcement Benefits.|2019|10.1109/DYSPAN.2019.8935730|https://dblp.org/rec/conf/dyspan/StojadinovicFMS19
  School level characteristics and students&apos; CIL in Europe - A latent class analysis approach.|2018|10.1016/J.COMPEDU.2018.01.013|https://dblp.org/rec/journals/ce/Gerick18
  CIL to Java-bytecode translation for static analysis leveraging.|2018|10.1145/3193992.3193994|https://dblp.org/rec/conf/icse/FerraraCS18
  The impact of digital devices vs. Pen(cil) and paper on primary school students&apos; writing skills - A research review.|2016|10.1016/J.COMPEDU.2015.12.001|https://dblp.org/rec/journals/ce/WollscheidST16
  CIL Security Proof for a Password-Based Key Exchange.|2013|10.1007/978-3-642-41227-1_4|https://dblp.org/rec/conf/provsec/EneGL13
  Compounds In Literature (CIL): screening for compounds and relatives in PubMed.|2011|10.1093/BIOINFORMATICS/BTR130|https://dblp.org/rec/journals/bioinformatics/GruningSEFG11