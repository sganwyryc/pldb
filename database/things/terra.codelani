appeared 2012
type pl
website http://terralang.org/
github https://github.com/zdevito/terra
example
 -- This top-level code is plain Lua code.
 function printhello()
     -- This is a plain Lua function
     print("Hello, Lua!")
 end
 printhello()
 
 -- Terra is backwards compatible with C, we'll use C's io library in our example.
 C = terralib.includec("stdio.h")
 
 -- The keyword 'terra' introduces a new Terra function.
 terra hello(argc : int, argv : &rawstring)
     -- Here we call a C function from Terra
     C.printf("Hello, Terra!\n")
     return 0
 end
 
 -- You can call Terra functions directly from Lua, they are JIT compiled 
 -- using LLVM to create machine code
 hello(0,nil)
 
 -- Terra functions are first-class values in Lua, and can be introspected 
 -- and meta-programmed using it
 hello:disas()
 --[[ output:
     assembly for function at address 0x60e6010
     0x60e6010(+0):    push  rax
     0x60e6011(+1):    movabs  rdi, 102129664
     0x60e601b(+11):   movabs  rax, 140735712154681
     0x60e6025(+21):   call  rax
     0x60e6027(+23):   xor eax, eax
     0x60e6029(+25):   pop rdx
     0x60e602a(+26):   ret
 ]]
 
 -- You can save Terra code as executables, object files, or shared libraries 
 -- and link them into existing programs
 terralib.saveobj("helloterra",{ main = hello })
description Terra is a low-level system programming language that is embedded in and meta-programmed by the Lua programming language: