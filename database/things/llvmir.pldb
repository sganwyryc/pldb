title LLVM IR
appeared 2003
type ir

lineCommentKeyword #

wikipedia https://en.wikipedia.org/wiki/LLVM
 example
  @.str = internal constant [14 x i8] c"hello, world\0A\00"
  
  declare i32 @printf(i8*, ...)
  
  define i32 @main(i32 %argc, i8** %argv) nounwind {
  entry:
      %tmp1 = getelementptr [14 x i8], [14 x i8]* @.str, i32 0, i32 0
      %tmp2 = call i32 (i8*, ...) @printf( i8* %tmp1 ) nounwind
      ret i32 0
  }
 related c actionscript ada csharp common-lisp crystal d delphi fortran glsl haskell java-bytecode julia lua objective-c python r ruby rust cuda scala swift xojo ios assembly-language java opengl cil standard-ml arm hexagon mips ptx powerpc sparc x86-isa elf c-- pure opencl isbn
 summary The LLVM compiler infrastructure project is a "collection of modular and reusable compiler and toolchain technologies" used to develop compiler front ends and back ends. LLVM is written in C++ and is designed for compile-time, link-time, run-time, and "idle-time" optimization of programs written in arbitrary programming languages. Originally implemented for C and C++, the language-agnostic design of LLVM has since spawned a wide variety of front ends: languages with compilers that use LLVM include ActionScript, Ada, C#, Common Lisp, Crystal, D, Delphi, Fortran, OpenGL Shading Language, Halide, Haskell, Java bytecode, Julia, Lua, Objective-C, Pony, Python, R, Ruby, Rust, CUDA, Scala, Swift, and Xojo. The LLVM project started in 2000 at the University of Illinois at Urbana–Champaign, under the direction of Vikram Adve and Chris Lattner. LLVM was originally developed as a research infrastructure to investigate dynamic compilation techniques for static and dynamic programming languages. LLVM was released under the University of Illinois/NCSA Open Source License, a permissive free software licence. In 2005, Apple Inc. hired Lattner and formed a team to work on the LLVM system for various uses within Apple's development systems. LLVM is an integral part of Apple's latest development tools for macOS and iOS. Since 2013, Sony has been using LLVM's primary front end Clang compiler in the software development kit (SDK) of its PS4 console. The name LLVM was originally an initialism for Low Level Virtual Machine. This initialism has offically been removed to avoid confusion, as the LLVM has evolved into an umbrella project that has little relationship to what most current developers think of as virtual machines. Now, LLVM is a brand that applies to the LLVM umbrella project, the LLVM intermediate representation (IR), the LLVM debugger, the LLVM C++ Standard Library (with full support of C++11 and C++14), etc. LLVM is administered by the LLVM Foundation. Its president is compiler engineer Tanya Lattner. The Association for Computing Machinery presented Adve, Lattner, and Evan Cheng with the 2012 ACM Software System Award for LLVM.
 pageId 654611
 dailyPageViews 693
 created 2004
 backlinksCount 252
 revisionCount 692
 appeared 2000

githubLanguage LLVM
 fileExtensions ll
 trendingProjects
  author name avatar url language languageColor stars forks currentPeriodStars description
  llvm-mirror llvm https://github.com/llvm-mirror.png https://github.com/llvm-mirror/llvm LLVM #185619 4073 1911 87 "Mirror of official llvm git repository located at http://llvm.org/git/llvm. Updated every five minutes."
 trendingProjectsCount 2

website http://llvm.org/docs/LangRef.html
status active

tryItOnline llvm

fileType text
isOpenSource true
linkedInSkill llvm
 2018 2326

quineRelay LLVM asm

ubuntuPackage llvm

centralPackageRepositoryCount 0
aka llvm
rijuRepl https://riju.codes/llvm
 example
  @.str = private unnamed_addr constant [13 x i8] c"Hello, world!"
  
  declare i32 @puts(i8* nocapture) nounwind
  
  define i32 @main() {
      %cast210 = getelementptr [13 x i8],[13 x i8]* @.str, i64 0, i64 0
      call i32 @puts(i8* %cast210)
      ret i32 0
  }
  
patterns
 hasLineComments? true
  # A comment
dblp https://dblp.org/search?q=$LLVM IR$
 hits 22
 publications
  title|year|doi|url
  Modular, compositional, and executable formal semantics for LLVM IR.|2021|10.1145/3473572|https://dblp.org/rec/journals/pacmpl/ZakowskiBYZZZ21
  Extending LLVM IR for DPC++ Matrix Support: A Case Study with Intel® Advanced Matrix Extensions (Intel® AMX).|2021|10.1109/LLVMHPC54804.2021.00008|https://dblp.org/rec/conf/llvmhpc/KhaldiLYSMG21
  K-LLVM: A Relatively Complete Semantics of LLVM IR.|2020|10.4230/LIPICS.ECOOP.2020.7|https://dblp.org/rec/conf/ecoop/LiG19
  SKA: static kernel analysis using LLVM IR.|2015|10.1145/2833157.2833163|https://dblp.org/rec/conf/sc/RamkrishnanBT15
  An Isabelle/HOL formalization of AProVE&apos;s termination method for LLVM IR.|2021|10.1145/3437992.3439935|https://dblp.org/rec/conf/cpp/HaslbeckT21
  Raising MIPS Binaries to LLVM IR.|2021|10.1007/978-3-030-92571-0_6|https://dblp.org/rec/conf/iciss/RomanaBKPE21
  Accurate LLVM IR to Binary CFGs Mapping for Simulation of Optimized Embedded Software.|2021|10.1007/978-3-031-04580-6_1|https://dblp.org/rec/conf/samos/CornagliaVB21
  LLSC: a parallel symbolic execution compiler for LLVM IR.|2021|10.1145/3468264.3473108|https://dblp.org/rec/conf/sigsoft/0001TBR21
  An Accurate and Quick ANN-Based System-Level Dynamic Power Estimation Model Using LLVM IR Profiling for FPGA Designs.|2020|10.1109/LES.2019.2935052|https://dblp.org/rec/journals/esl/TripathiR20
  IR2VEC: LLVM IR Based Scalable Program Embeddings.|2020|10.1145/3418463|https://dblp.org/rec/journals/taco/VenkataKeerthyA20