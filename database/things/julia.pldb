title Julia
appeared 2012
type pl
creators Jeff Bezanson and Alan Edelman and Stefan Karpinski and Viral B. Shah
website http://julialang.org/
fileExtensions jl
domainName julialang.org
 awisRank
  2022 60667

visualParadigm false

features
 hasStrings true
  "hello world"
 hasMultipleDispatch true
  collide_with(x::Asteroid, y::Asteroid) = ... # deal with asteroid hitting asteroid
  collide_with(x::Asteroid, y::Spaceship) = ... # deal with asteroid hitting spaceship
  collide_with(x::Spaceship, y::Asteroid) = ... # deal with spaceship hitting asteroid
  collide_with(x::Spaceship, y::Spaceship) = ... # deal with spaceship hitting spaceship
 hasUnicodeIdentifiers true
  Î´ = 0.00001
 hasComments true
  # This is a comment
 hasMultiLineComments true
  #=
  A comment.
  =#
 hasGarbageCollection true
 hasBooleans true
 hasIntegers true
  1
 hasPrintDebugging true
  print("hello world")
 hasImports true
  # Files and file names are mostly unrelated to modules; modules are associated only with module expressions.
  # One can have multiple files per module, and multiple modules per file:
  using MyModule
  using MyModule: x, p
  import MyModule
  import MyModule.x, MyModule.p
  import MyModule: x, p
  module Foo
  include("file1.jl")
  include("file2.jl")
  end
 hasMixins true
  # Including the same code in different modules provides mixin-like behavior.
  module Normal
  include("mycode.jl")
  end
  
  module Testing
  include("safe_operators.jl")
  include("mycode.jl")
  end
 hasPipes true
  [1,2,3] |> (y -> f(3, y))
 hasSemanticIndentation false
 hasModules true
  module MyModule
  using Lib
  
  using BigLib: thing1, thing2
  
  import Base.show
  
  export MyType, foo
  
  struct MyType
      x
  end
  
  bar(x) = 2x
  foo(a::MyType) = bar(a.x) + 1
  
  show(io::IO, a::MyType) = print(io, "MyType $(a.x)")
  end
 hasLineComments true
  # A comment
 hasWhileLoops true
 hasConstants true
 hasFunctions true
 hasConditionals true
 hasOctals true
  # 0o[0-7]+((_[0-7]+)+)?
 hasHexadecimals true
  # 0x[a-fA-F0-9]+((_[a-fA-F0-9]+)+)?
 hasFloats true
  # (\d+((_\d+)+)?\.(?!\.)(\d+((_\d+)+)?)?|\.\d+((_\d+)+)?)([eEf][+-]?[0-9]+)?
 hasBinaryNumbers true
  # 0b[01]+((_[01]+)+)?

lineCommentToken #
multiLineCommentTokens #= =#
printToken print
printToken println
stringToken "
booleanTokens true false
keywords begin while if for try return break continue function macro quote let local global const do struct abstract typealias bitstype type immutable module baremodule using import export importall end else catch finally true false

wikipedia https://en.wikipedia.org/wiki/Julia_(programming_language)
 example
  julia> p(x) = 2x^2 + 1; f(x, y) = 1 + 2p(x)y
  julia> println("Hello world!", " I'm on cloud ", f(0, 4), " as Julia supports recognizable syntax!")
  Hello world! I'm on cloud 9 as Julia supports recognizable syntax!
 related c scheme llvmir fortran ia-32 linux freebsd lisp lua mathematica wolfram matlab perl python r ruby regex unicode utf-8 common-lisp dylan algol fortress html xml json arm powerpc
 summary Julia is a high-level dynamic programming language designed to address the needs of high-performance numerical analysis and computational science, without the typical need of separate compilation to be fast, while also being effective for general-purpose programming, web use or as a specification language. Distinctive aspects of Julia's design include a type system with parametric polymorphism and types in a fully dynamic programming language and multiple dispatch as its core programming paradigm. It allows concurrent, parallel and distributed computing, and direct calling of C and Fortran libraries without glue code. Julia is garbage-collected, uses eager evaluation and includes efficient libraries for floating-point calculations, linear algebra, random number generation, fast Fourier transforms and regular expression matching.
 pageId 38455554
 dailyPageViews 640
 created 2012
 backlinksCount 377
 revisionCount 1075
 appeared 2012
 fileExtensions jl

githubLanguage Julia
 fileExtensions jl
 trendingProjects
  author name avatar url language languageColor stars forks currentPeriodStars description
  JuliaLang julia https://github.com/JuliaLang.png https://github.com/JuliaLang/julia Julia #a270ba 23614 3524 510 "The Julia Language: A fresh approach to technical computing."
  JuliaLang IJulia.jl https://github.com/JuliaLang.png https://github.com/JuliaLang/IJulia.jl Julia #a270ba 1780 298 38 "Julia kernel for Jupyter"
 trendingProjectsCount 3

monaco julia
codeMirror julia
pygmentsHighlighter Julia
 filename julia.py
 fileExtensions jl
linguistGrammarRepo https://github.com/JuliaEditorSupport/atom-language-julia
 firstCommit 2015
 lastCommit 2018
 committerCount 21
 commitCount 191
 sampleCount 2
 example
  #!/usr/bin/env julia
  
  # From https://github.com/JoshCheek/language-sampler-for-fullpath/blob/b766dcdbd249ec63516f491390a75315e78cba95/julia/fullpath
  help_screen = """
  usage: fullpath *[relative-paths] [-c]
  
    Prints the fullpath of the paths
    If no paths are given as args, it will read them from stdin
  
    If there is only one path, the trailing newline is omitted
  
    The -c flag will copy the results into your pasteboard
  """
  
  help  = false
  copy  = false
  dir   = pwd()
  paths = []
  
  for arg = ARGS
    if arg == "-h" || arg == "--help"
      help = true
    elseif arg == "-c" || arg == "--copy"
      copy = true
    elseif arg != ""
      push!(paths, arg)
    end
  end
  
  if help
    print(help_screen)
    exit()
  end
  
  function notempty(string)
    return !isempty(string)
  end
  
  if length(paths) == 0
    paths = filter(notempty, map(chomp, readlines()))
  end
  
  function print_paths(stream, paths)
    if length(paths) == 1
      path = paths[1]
      print(stream, "$dir/$path")
    else
      for path = paths
        println(stream, "$dir/$path")
      end
    end
  end
  
  if copy
    read, write, process = readandwrite(`pbcopy`)
    print_paths(write, paths)
    close(write)
  end
  
  print_paths(STDOUT, paths)
  
languageServerProtocolProject https://github.com/JuliaEditorSupport/LanguageServer.jl
 writtenIn julia

projectEuler Julia
 memberCount
  2019 331
  2022 700
helloWorldCollection Julia
 # Hello world in Julia
 
 println("Hello, World!")
leachim6 Julia
 filepath j/Julia.jl
 fileExtensions jl
 example
  println("Hello World")
  
rosettaCode Julia
quineRelay Julia

rijuRepl https://riju.codes/julia
 example
  println("Hello, world!")
  
tryItOnline julia

indeedJobs julia engineer
 2017 85
stackOverflowSurvey
 2021
  users 1068
  medianSalary 65228
  fans 2445
  percentageUsing 0.01

subreddit Julia
 memberCount
  2017 3660
  2022 20624
meetup julia
 memberCount 15211
 groupCount 36

tiobe Julia
 currentRank 35

packageRepository https://pkg.julialang.org/

twitter julialanguage
ubuntuPackage julia
jupyterKernel https://github.com/JuliaLang/IJulia.jl
fileType text
wordRank 7592
isOpenSource true
isbndb 22
 year|publisher|title|authors|isbn13
 2020|SAV Publishing|The Little Book of Julia Algorithms: A workbook to develop fluency in Julia programming|Sengupta, Ahan and Lau, William|9781838173609
 2019|Independently published|Julia Programming for Operations Research|Kwon, Changhyun|9781798205471
 2017|Apress|Beginning Julia Programming: For Engineers and Scientists|Nagar, Sandeep|9781484231715
 2019|Apress|Julia Quick Syntax Reference: A Pocket Guide for Data Science Programming|Lobianco, Antonello|9781484251898
 2019-06-10T00:00:01Z|Packt Publishing|Julia High Performance: Optimizations, distributed computing, multithreading, and GPU programming with Julia 1.0 and beyond, 2nd Edition|Sengupta, Avik|9781788298117
 2019|McGraw-Hill Education TAB|Tanmay Teaches Julia for Beginners: A Springboard to Machine Learning for All Ages|Bakshi, Tanmay|9781260456646
 2019|Packt Publishing|Julia High Performance: Optimizations, distributed computing, multithreading, and GPU programming with Julia 1.0 and beyond, 2nd Edition|Sengupta, Avik|9781788292306
 2018|Packt Publishing|Julia Programming Projects: Learn Julia 1.x by building apps for data analysis, visualization, machine learning, and the web|Salceanu, Adrian|9781788297257
 2019|Packt Publishing|Julia 1.0 Programming Complete Reference Guide: Discover Julia, a high-performance language for technical computing|Balbaert, Ivo and Salceanu, Adrian|9781838824679
 2019|Packt Publishing|Julia 1.0 Programming Complete Reference Guide: Discover Julia, a high-performance language for technical computing|Balbaert, Ivo and Salceanu, Adrian|9781838822248
 2018|Packt Publishing|Julia Programming Projects: Learn Julia 1.x by building apps for data analysis, visualization, machine learning, and the web|Salceanu, Adrian|9781788292740
 2018|Packt Publishing|Julia 1.0 Programming: Dynamic and high-performance programming to build fast scientific applications, 2nd Edition|Balbaert, Ivo|9781788990059
 2019|McGraw-Hill Education TAB|Tanmay Teaches Julia for Beginners: A Springboard to Machine Learning for All Ages|Bakshi, Tanmay|9781260456639
 2018-11-29T00:00:01Z|Packt Publishing|Julia 1.0 Programming Cookbook: Over 100 numerical and distributed computing recipes for your daily data science workflow|Kaminski, Bogumil and Szufel, Przemyslaw|9781788998369
 2016|Packt Publishing|Julia High Performance|Sengupta, Avik|9781785887826
 2021|BPB Publications|Hands-On Julia Programming: An Authoritative Guide to the Production-Ready Systems in Julia (English Edition)|Dash, Sambit Kumar|9789391030889
 2018|Packt Publishing|Julia 1.0 Programming: Dynamic and high-performance programming to build fast scientific applications, 2nd Edition|Balbaert, Ivo|9781788999090
 2016|CreateSpace Independent Publishing Platform|Julia Programming for Operations Research: A Primer on Computing|Kwon, Changhyun|9781533328793
 2016|Packt Publishing|Julia Cookbook|Rohit, Jalem Raj|9781785882012
 2018|Packt Publishing|Julia 1.0 Programming Cookbook: Over 100 numerical and distributed computing recipes for your daily data science workï¬ow|KamiÅski, BogumiÅ and Szufel, PrzemysÅaw|9781788998826
 2017-11-27T00:00:01Z|Apress|Beginning Julia Programming: For Engineers and Scientists|Nagar, Sandeep|9781484231708
 2018|Springer|Numerical Linear Algebra: A Concise Introduction with MATLAB and Julia (Springer Undergraduate Mathematics Series)|Bornemann, Folkmar|9783319742229