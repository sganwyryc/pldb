title Coq
appeared 1989
type pl
subreddit Coq
 memberCount
  2022 2066

wikipedia https://en.wikipedia.org/wiki/Coq
 related ocaml agda idris c isabelle
 summary In computer science, Coq is an interactive theorem prover. It allows the expression of mathematical assertions, mechanically checks proofs of these assertions, helps to find formal proofs, and extracts a certified program from the constructive proof of its formal specification. Coq works within the theory of the calculus of inductive constructions, a derivative of the calculus of constructions. Coq is not an automated theorem prover but includes automatic theorem proving tactics and various decision procedures. The Association for Computing Machinery rewarded Thierry Coquand, Gérard Pierre Huet, Christine Paulin-Mohring, Bruno Barras, Jean-Christophe Filliâtre, Hugo Herbelin, Chetan Murthy, Yves Bertot and Pierre Castéran with the 2013 ACM Software System Award for Coq.
 pageId 581974
 dailyPageViews 265
 created 2004
 backlinksCount 138
 revisionCount 267
 appeared 1989

githubLanguage Coq
 fileExtensions coq v
 trendingProjectsCount 0

linguistGrammarRepo https://github.com/mkolosick/Sublime-Coq
 firstCommit 2013
 lastCommit 2018
 committerCount 4
 commitCount 62
 sampleCount 13
 example
  Require Import FunctionNinjas.All.
  Require Import ListString.All.
  Require Import Computation.
  
  Import C.Notations.
  
  Definition error (message : LString.t) : C.t :=
    do_call! Command.ShowError message in
    ret.
  
  Definition main : C.t :=
    call! card_is_valid := Command.AskCard in
    if card_is_valid then
      call! pin := Command.AskPIN in
      match pin with
      | None => error @@ LString.s "No PIN given."
      | Some pin =>
        call! pin_is_valid := Command.CheckPIN pin in
        if pin_is_valid then
          call! ask_amount := Command.AskAmount in
          match ask_amount with
          | None => error @@ LString.s "No amount given."
          | Some amount =>
            call! amount_is_valid := Command.CheckAmount amount in
            if amount_is_valid then
              call! card_is_given := Command.GiveCard in
              if card_is_given then
                call! amount_is_given := Command.GiveAmount amount in
                if amount_is_given then
                  ret
                else
                  error @@ LString.s "Cannot give you the amount. Please contact your bank."
              else
                error @@ LString.s "Cannot give you back the card. Please contact your bank."
            else
              error @@ LString.s "Invalid amount."
          end
        else
          error @@ LString.s "Invalid PIN."
      end
    else
      error @@ LString.s "Invalid card.".
  

status active
country FR
fileType text
isOpenSource true

hopl 6970

rosettaCode Coq

centralPackageRepositoryCount 0
dblp https://dblp.org/search?q=$Coq$
 hits 609
 publications
  title|year|doi|url
  Coq Coq correct! verification of type checking and erasure for Coq, in Coq.|2020|10.1145/3371076|https://dblp.org/rec/journals/pacmpl/SozeauBFTW20
  Formally Verified Defensive Programming (efficient Coq-verified computations from untrusted ML oracles). (Programmation défensive formellement vérifiée (calculs efficaces et vérifiés en Coq, à partir d&apos;oracles OCaml potentiellement non fiables)).|2021||https://dblp.org/rec/books/hal/Boulme21
  Developing and certifying in Coq/MathComp of Datalog optimizations for network verification. (Développement et certification en Coq/MathComp d&apos;optimisations Datalog pour la vérification réseau).|2021||https://dblp.org/rec/phd/hal/Begay21
  Formalisation en Coq des algorithmes de filtre numérique calculés en précision finie. (Coq formalization of digital filter algorithms computed using finite precision arithmetic).|2021||https://dblp.org/rec/phd/hal/GalloisWong21
  The Coq Proof Script Visualiser (coq-psv).|2021||https://dblp.org/rec/journals/corr/abs-2101-07761
  Extracting functional programs from Coq, in Coq.|2021||https://dblp.org/rec/journals/corr/abs-2108-02995
  Traduction mécanisée et certifiée en Coq d&apos;une algèbre relationnelle étendue pour SQL vers une algèbre imbriquée. (A Coq certified translation from an extension of relational algebra for SQL to a nested algebra).|2020||https://dblp.org/rec/phd/hal/Hachmaoui20
  Approche combinatoire pour l&apos;automatisation en Coq des preuves formelles en géométrie d&apos;incidence projective. (Combinatorial approach for the automation in Coq of formal proofs in incidence projective geometry).|2019||https://dblp.org/rec/phd/hal/Braun19a
  基于Coq记录的矩阵形式化方法 (Matrix Formalization Based on Coq Record).|2019|10.11896/J.ISSN.1002-137X.2019.07.022|https://dblp.org/rec/journals/jsjkx/MaC19
  Deriving Proved Equality Tests in Coq-Elpi: Stronger Induction Principles for Containers in Coq.|2019|10.4230/LIPICS.ITP.2019.29|https://dblp.org/rec/conf/itp/Tassi19