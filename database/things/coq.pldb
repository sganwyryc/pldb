title Coq
appeared 1989
type pl
country France

features
 hasOctals true
 hasHexadecimals true
 hasFloats true
 hasIntegers true
 hasBinaryNumbers true

wikipedia https://en.wikipedia.org/wiki/Coq
 related ocaml agda idris c isabelle
 summary In computer science, Coq is an interactive theorem prover. It allows the expression of mathematical assertions, mechanically checks proofs of these assertions, helps to find formal proofs, and extracts a certified program from the constructive proof of its formal specification. Coq works within the theory of the calculus of inductive constructions, a derivative of the calculus of constructions. Coq is not an automated theorem prover but includes automatic theorem proving tactics and various decision procedures. The Association for Computing Machinery rewarded Thierry Coquand, Gérard Pierre Huet, Christine Paulin-Mohring, Bruno Barras, Jean-Christophe Filliâtre, Hugo Herbelin, Chetan Murthy, Yves Bertot and Pierre Castéran with the 2013 ACM Software System Award for Coq.
 pageId 581974
 dailyPageViews 265
 created 2004
 backlinksCount 138
 revisionCount 267
 appeared 1989

githubLanguage Coq
 fileExtensions coq v
 trendingProjectsCount 0

pygmentsHighlighter Coq
 filename theorem.py
 fileExtensions v
linguistGrammarRepo https://github.com/mkolosick/Sublime-Coq
 firstCommit 2013
 lastCommit 2018
 committerCount 4
 commitCount 62
 sampleCount 13
 example
  Require Import FunctionNinjas.All.
  Require Import ListString.All.
  Require Import Computation.
  
  Import C.Notations.
  
  Definition error (message : LString.t) : C.t :=
    do_call! Command.ShowError message in
    ret.
  
  Definition main : C.t :=
    call! card_is_valid := Command.AskCard in
    if card_is_valid then
      call! pin := Command.AskPIN in
      match pin with
      | None => error @@ LString.s "No PIN given."
      | Some pin =>
        call! pin_is_valid := Command.CheckPIN pin in
        if pin_is_valid then
          call! ask_amount := Command.AskAmount in
          match ask_amount with
          | None => error @@ LString.s "No amount given."
          | Some amount =>
            call! amount_is_valid := Command.CheckAmount amount in
            if amount_is_valid then
              call! card_is_given := Command.GiveCard in
              if card_is_given then
                call! amount_is_given := Command.GiveAmount amount in
                if amount_is_given then
                  ret
                else
                  error @@ LString.s "Cannot give you the amount. Please contact your bank."
              else
                error @@ LString.s "Cannot give you back the card. Please contact your bank."
            else
              error @@ LString.s "Invalid amount."
          end
        else
          error @@ LString.s "Invalid PIN."
      end
    else
      error @@ LString.s "Invalid card.".
  

rosettaCode Coq

subreddit Coq
 memberCount
  2022 2066

hopl 6970

fileType text
isOpenSource true
centralPackageRepositoryCount 0
isbndb 3
 year|publisher|title|authors|isbn13
 2013-12-06T00:00:01Z|The MIT Press|Certified Programming with Dependent Types: A Pragmatic Introduction to the Coq Proof Assistant (The MIT Press)|Chlipala, Adam|9780262026659
 2022|MIT Press|Certified Programming with Dependent Types: A Pragmatic Introduction to the Coq Proof Assistant|Chlipala, Adam|9780262545747
 2017|ISTE Press - Elsevier|Computer Arithmetic and Formal Proofs: Verifying Floating-point Algorithms with the Coq System (Computer Engineering)|Boldo, Sylvie and Melquiond, Guillaume|9780081011706