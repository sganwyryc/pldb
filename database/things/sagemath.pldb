title Sage
appeared 2005
type pl

wikipedia https://en.wikipedia.org/wiki/SageMath
 example
  sage: E2 = EllipticCurve(CC, [0,0,-2,1,1])
  sage: E2
  Elliptic Curve defined by y^2 + (-2.00000000000000)*y = 
           x^3 + 1.00000000000000*x + 1.00000000000000 over 
           Complex Field with 53 bits of precision
  sage: E2.j_invariant()
  61.7142857142857
 related python cython linux solaris android ios ia-32 arm sparc maple mathematica matlab maxima scipy numpy r latex sql fortran c common-lisp pari-gp sqlite matplotlib
 summary SageMath (previously Sage or SAGE, "System for Algebra and Geometry Experimentation") is a mathematical software with features covering many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus. The first version of SageMath was released on 24 February 2005 as free and open-source software under the terms of the GNU General Public License version 2, with the initial goals of creating an "open source alternative to Magma, Maple, Mathematica, and MATLAB". The originator and leader of the SageMath project, William Stein, is a mathematician at the University of Washington. SageMath uses a syntax resembling Python's supporting procedural, functional and object-oriented constructs.
 pageId 4012438
 dailyPageViews 179
 created 2006
 backlinksCount 269
 revisionCount 846
 appeared 2005

githubLanguage Sage
 fileExtensions sage sagews
 trendingProjectsCount 0

linguistGrammarRepo https://github.com/MagicStack/MagicPython
 firstCommit 2015
 lastCommit 2018
 committerCount 13
 commitCount 415
 sampleCount 1
 example
  # -*- coding: utf-8 -*-
  #
  #   Funciones en Python/Sage para el trabajo con polinomios con una
  #   incógnita (x).
  #
  #   Copyright (C) 2014-2015, David Abián <davidabian [at] davidabian.com>
  #
  #   This program is free software: you can redistribute it and/or modify it
  #   under the terms of the GNU General Public License as published by the Free
  #   Software Foundation, either version 3 of the License, or (at your option)
  #   any later version.
  #
  #   This program is distributed in the hope that it will be useful, but WITHOUT
  #   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  #   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  #   more details.
  #
  #   You should have received a copy of the GNU General Public License along with
  #   this program.  If not, see <http://www.gnu.org/licenses/>.
  
  def pols (grado=-1, K=GF(2), mostrar=False):
      """Devuelve la lista de polinomios constantes y no constantes de
      coeficientes mónicos y grado igual o menor que el especificado.
      Si el grado indicado no es válido, devuelve una lista vacía.
      """
      lpols = []
      if not grado.is_integer():
          grado = grado.round()
      if grado >= 0:
          var('x')
          xs = vector([(x^i) for i in range(grado+1)])
          V = VectorSpace(K,grado+1)
          lpols = [cs*xs for cs in V]
          if mostrar:
              for pol in lpols:
                  print pol
      return lpols
  
  def polsNoCtes (grado=-1, K=GF(2), mostrar=False):
      """Devuelve la lista de polinomios no constantes de coeficientes mónicos y
      grado igual o menor que el especificado.
      Si el grado indicado no es válido, devuelve una lista vacía.
      """
      lpols = []
      if not grado.is_integer():
          grado = grado.round()
      if grado >= 0:
          var('x')
          xs = vector([(x^i) for i in range(grado+1)])
          for cs in K^(grado+1):
              if cs[:grado] != vector(grado*[0]): # no constantes
                  lpols += [cs*xs]
          if mostrar:
              for pol in lpols:
                  print pol
      return lpols
  
  def polsMismoGrado (grado=-1, K=GF(2), mostrar=False):
      """Devuelve la lista de polinomios de coeficientes mónicos del grado
      especificado.
      Si el grado indicado no es válido, devuelve una lista vacía.
      """
      lpols = []
      if not grado.is_integer():
          grado = grado.round()
      if grado >= 0:
          var('x')
          xs = vector([(x^(grado-i)) for i in [0..grado]])
          for cs in K^(grado+1):
              if cs[0] != 0: # polinomios del mismo grado
                  lpols += [cs*xs]
          if mostrar:
              for pol in lpols:
                  print pol
      return lpols
  
  def excluirReducibles (lpols=[], mostrar=False):
      """Filtra una lista dada de polinomios de coeficientes mónicos y devuelve
      aquellos irreducibles.
      """
      var('x')
      irreds = []
      for p in lpols:
          fp = (p.factor_list())
          if len(fp) == 1 and fp[0][1] == 1:
              irreds += [p]
      if mostrar:
          for pol in irreds:
              print pol
      return irreds
  
  def vecPol (vec=random_vector(GF(2),0)):
      """Transforma los coeficientes dados en forma de vector en el polinomio
      que representan.
      
      Por ejemplo, con vecPol(vector([1,0,3,1])) se obtiene x³ + 3*x + 1.
      
      Para la función opuesta, véase polVec().
      """
      var('x')
      xs = vector([x^(len(vec)-1-i) for i in range(len(vec))])
      return vec*xs
  
  def polVec (p=None):
      """Devuelve el vector de coeficientes del polinomio dado que acompañan a la
      incógnita x, de mayor a menor grado.
      
      Por ejemplo, con polVec(x^3 + 3*x + 1) se obtiene el vector (1, 0, 3, 1).
      
      Para la función opuesta, véase vecPol().
      """
      cs = []
      if p != None:
          var('x')
          p(x) = p
          for i in [0..p(x).degree(x)]:
              cs.append(p(x).coefficient(x,i))
          cs = list(reversed(cs))
      return vector(cs)
  
  def completar2 (p=0):
      """Aplica el método de completar cuadrados en parábolas al polinomio dado de
      grado 2 y lo devuelve en su nueva forma.
      
      Si el polinomio dado no es válido, devuelve 0.
      
      Por ejemplo, con complCuad(3*x^2 + 12*x + 5) se obtiene 3*(x + 2)^2 - 7.
      """
      var('x')
      p(x) = p.expand()
      if p(x).degree(x) != 2:
          p(x) = 0
      else:
          cs = polVec(p(x))
          p(x) = cs[0]*(x+(cs[1]/(2*cs[0])))^2+(4*cs[0]*cs[2]-cs[1]^2)/(4*cs[0])
      return p(x)
  

website http://www.sagemath.org/
aka Sage
status active

twitter sagemath

fileType text
isOpenSource true

projectEuler Sage
 memberCount
  2019 268
  2022 312

jupyterKernel http://www.sagemath.org/
centralPackageRepositoryCount 0
rijuRepl https://riju.codes/sagemath
 example
  print("Hello, world!")
  
dblp https://dblp.org/search?q=$Sage$
 hits 369
 publications
  title|year|doi|url
  Stratospheric Aerosol and Gas Experiment (SAGE) from SAGE III on the ISS to a Free Flying SAGE IV Cubesat.|2021|10.3390/RS13224664|https://dblp.org/rec/journals/remotesensing/LeckeyDH21
  The SAGE Handbook of Social Media Research Methods. Luke Sloan and Anabel Quan-Haase (Eds.). Thousand Oaks, CA: SAGE Publishing, 2017. 728 pp. $175.00 (Hardcover). (ISBN 9781473916326).|2018|10.1002/ASI.23957|https://dblp.org/rec/journals/jasis/Haythornthwaite18
  The SAGE handbook of GIS and society, edited by Timothy L. Nyerges, Helen Couclelis, and Robert McMasterLondon, SAGE Publications Ltd., 2011, 576 pp., US$150 (hardcover), ISBN 978-1-4129-4645-2.|2012|10.1080/19475683.2012.694262|https://dblp.org/rec/journals/agis/Kim12
  Extending the Friedman-Sage systems engineering case study framework forenterprise architecture case study research.|2010|10.3233/IKS-2010-0168|https://dblp.org/rec/journals/iks/HarrellS10b
  C. Eden and F. Ackermann, MAKING STRATEGY, The Journey of Strategic Management, SAGE Publications, London, UK (1998) ISBN 0-7619-5225-X - F. Ackermann, C. Eden and I. Brown, The Practice of MAKING STRATEGY, A Step-by Step Guide, SAGE Publications, London, UK (2005) ISBN 0-7619-4494-X.|2007|10.1016/J.EJOR.2006.02.002|https://dblp.org/rec/journals/eor/Vidal07
  Identitag, a relational database for SAGE tag identification and interspecies comparison of SAGE libraries.|2004|10.1186/1471-2105-5-143|https://dblp.org/rec/journals/bmcbi/KeimeDMDG04
  The Mouse SAGE Site: database of public mouse SAGE libraries.|2004|10.1093/NAR/GKH058|https://dblp.org/rec/journals/nar/DivinaF04
  SAGE and its application to electronic commerce - SAGE: Francis: A system based on &quot;virtual catalog&quot;.|1999|10.1002/(SICI)1520-684X(19990615)30:6&lt;36::AID-SCJ4&gt;3.0.CO;2-5|https://dblp.org/rec/journals/scjapan/SugasakaMSKM99
  Burning Sage: Reversing the Curse of Dimensionality in the Visualization of High-Dimensional Data.|2022|10.1080/10618600.2021.1963264|https://dblp.org/rec/journals/jcgs/LaaCL22
  Radar Target Tracking for Unmanned Surface Vehicle Based on Square Root Sage-Husa Adaptive Robust Kalman Filter.|2022|10.3390/S22082924|https://dblp.org/rec/journals/sensors/QiaoFWMH22