title Oz
appeared 1991
type pl
creators Gert Smolka
website http://mozart.github.io
country Germany
domainName mozart.github.io

visualParadigm false

features
 hasComments true
 hasLineComments true
  % A comment
 hasSemanticIndentation false

lineCommentToken %

wikipedia https://en.wikipedia.org/wiki/Oz_(programming_language)
 example
  class Counter
     attr val
     meth init(Value)
        val:=Value
     end
     meth browse
        {Browse @val}
     end
     meth inc(Value)
        val :=@val+Value
     end
  end
  
  local C in
     C = {New Counter init(0)}
     {C inc(6)}
     {C browse}
  end
 related erlang lisp prolog alice scala unix freebsd linux curry mercury visual-prolog
 summary Oz is a multiparadigm programming language, developed in the Programming Systems Lab at Université catholique de Louvain, for programming language education. It has a canonical textbook: Concepts, Techniques, and Models of Computer Programming. Oz was first designed by Gert Smolka and his students in 1991. In 1996, development of Oz continued in cooperation with the research group of Seif Haridi and Peter Van Roy at the Swedish Institute of Computer Science. Since 1999, Oz has been continually developed by an international group, the Mozart Consortium, which originally consisted of Saarland University, the Swedish Institute of Computer Science, and the Université catholique de Louvain. In 2005, the responsibility for managing Mozart development was transferred to a core group, the Mozart Board, with the express purpose of opening Mozart development to a larger community. The Mozart Programming System is the primary implementation of Oz. It is released with an open source license by the Mozart Consortium. Mozart has been ported to different flavors of Unix, FreeBSD, Linux, Windows, and macOS.
 pageId 256916
 dailyPageViews 78
 created 2003
 backlinksCount 60
 revisionCount 228
 appeared 1991

githubLanguage Oz
 fileExtensions oz
 trendingProjectsCount 0

codeMirror oz
linguistGrammarRepo https://github.com/eregon/oz-tmbundle
 firstCommit 2010
 lastCommit 2012
 committerCount 2
 commitCount 59
 sampleCount 1
 example
  % You can get a lot of information about Oz by following theses links  :
  % - http://mozart.github.io/
  % - http://en.wikipedia.org/wiki/Oz_(programming_language)
  % There is also a well known book that uses Oz for pedagogical reason :
  % - http://mitpress.mit.edu/books/concepts-techniques-and-models-computer-programming
  % And there are two courses on edX about 'Paradigms of Computer Programming' that also uses Oz for pedagogical reason :
  % - https://www.edx.org/node/2751#.VHijtfl5OSo
  % - https://www.edx.org/node/4436#.VHijzfl5OSo
  %
  % Here is an example of some code written with Oz.
  
  declare
  % Computes the sum of square of the N first integers.
  fun {Sum N}
    local SumAux in
      fun {SumAux N Acc}
        if N==0 then Acc
        else
          {Sum N-1 Acc}
        end
      end
      {SumAux N 0}
    end
  end
  
  % Returns true if N is a prime and false otherwize
  fun {Prime N}
    local PrimeAcc in
      fun {PrimeAcc N Acc}
  	    if(N == 1) then false
  	    elseif(Acc == 1) then true
  	    else
  	      if (N mod Acc) == 0 then false
  	      else
  	       {PrimeAcc N Acc-1}
  	      end
  	   end
      end
    {PrimeAcc N (N div 2)}
    end
  end
  
  % Reverse a list using cells and for loop (instead of recursivity)
  fun {Reverse L}
    local RevList in
      RevList = {NewCell nil}
      for E in L do
        RevList := E|@RevList
      end
      @RevList
    end
  end
  

projectEuler Oz
 memberCount
  2019 4
  2022 4
helloWorldCollection Oz
 % Hello World in Oz
 
 functor
 import
   System
   Application
 define
   {System.showInfo "Hello World!"}
   {Application.exit 0}
 end
rosettaCode Oz

rijuRepl https://riju.codes/oz
 example
  functor
  import
      Application
      System
  define
      {System.showInfo 'Hello, world!'}
      {Application.exit 0}
  end
  

tiobe Oz
hopl 2327

fileType text
wordRank 2692
isOpenSource true
centralPackageRepositoryCount 0