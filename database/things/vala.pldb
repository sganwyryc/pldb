title Vala
appeared 2006
type pl

wikipedia https://en.wikipedia.org/wiki/Vala_(programming_language)
 example
  /* hellogtk.c generated by valac 0.34.4, the Vala compiler
   * generated from hellogtk.vala, do not modify */
  
  #include <glib.h>
  #include <glib-object.h>
  #include <stdlib.h>
  #include <string.h>
  #include <gtk/gtk.h>
  
  #define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
  
  gint _vala_main (gchar** args, int args_length1);
  static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender, gpointer self);
  
  static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender, gpointer self) {
  	gtk_main_quit ();
  }
  
  gint _vala_main (gchar** args, int args_length1) {
  	gint result = 0;
  	GtkWindow* window = NULL;
  	GtkWindow* _tmp0_ = NULL;
  	GtkLabel* label = NULL;
  	GtkLabel* _tmp1_ = NULL;
  	gtk_init (&args_length1, &args);
  	_tmp0_ = (GtkWindow*) gtk_window_new (GTK_WINDOW_TOPLEVEL);
  	g_object_ref_sink (_tmp0_);
  	window = _tmp0_;
  	gtk_window_set_title (window, "Hello, World!");
  	gtk_container_set_border_width ((GtkContainer*) window, (guint) 10);
  	g_object_set (window, "window-position", GTK_WIN_POS_CENTER, NULL);
  	gtk_window_set_default_size (window, 350, 70);
  	g_signal_connect ((GtkWidget*) window, "destroy", (GCallback) _gtk_main_quit_gtk_widget_destroy, NULL);
  	_tmp1_ = (GtkLabel*) gtk_label_new ("Hello, World!");
  	g_object_ref_sink (_tmp1_);
  	label = _tmp1_;
  	gtk_container_add ((GtkContainer*) window, (GtkWidget*) label);
  	gtk_widget_show_all ((GtkWidget*) window);
  	gtk_main ();
  	result = 0;
  	_g_object_unref0 (label);
  	_g_object_unref0 (window);
  	return result;
  }
  
  int main (int argc, char ** argv) {
  #if !GLIB_CHECK_VERSION (2,35,0)
  	g_type_init ();
  #endif
  	return _vala_main (argv, argc);
  }
 related c csharp d java boo emacs-editor sublime-editor textmate-editor eclipse-editor vim-editor visual-studio-code-editor genie python
 summary Vala is an object-oriented programming language with a self-hosting compiler that generates C code and uses the GObject system. Vala is syntactically similar to C# and includes several features such as: anonymous functions, signals, properties, generics, assisted memory management, exception handling, type inference, and foreach statements. Its developers Jürg Billeter and Raffaele Sandrini aim to bring these features to the plain C runtime with little overhead and no special runtime support by targeting the GObject object system. Rather than compiling directly to machine code or assembly language, it compiles to a lower level intermediate language. It source-to-source compiles to C, which is then compiled with a C compiler for a given platform, such as GCC. For memory management, the GObject system provides reference counting. In C, a programmer must manually manage adding and removing references, but in Vala, managing such reference counts is automated if a programmer uses the language's built-in reference types rather than plain pointers. Using functionality from native code libraries requires writing vapi files, defining the library interfacing. Writing these interface definitions is well-documented for C libraries, especially when based on GObject. However, C++ libraries are not supported. Vapi files are provided for a large portion of the GNOME platform, including GTK+. Vala was conceived by Jürg Billeter and was implemented by him and Raffaele Sandrini, finishing a self-hosting compiler in May 2006.
 pageId 12655903
 dailyPageViews 190
 created 2007
 backlinksCount 355
 revisionCount 428
 appeared 2017
 fileExtensions vala vapi

githubLanguage Vala
 fileExtensions vala vapi
 trendingProjectsCount 0

linguistGrammarRepo https://github.com/technosophos/Vala-TMBundle
 firstCommit 2010
 lastCommit 2016
 committerCount 6
 commitCount 23

website https://wiki.gnome.org/Projects/Vala
status active

tryItOnline vala

fileType text
isOpenSource true

rosettaCode Vala

centralPackageRepositoryCount 0