foldBreakNode
 crux foldBreak
 extends abstractScrollNode
 description Start a new section.
 javascript
  compile() {
    return `</div><div class="scrollArticlePageComponent" style="column-width:70ch;column-count:1;max-width:90ch;">`
  }
kpiTableNode
 catchAllNodeType rowNode
 crux kpiTable
 extends abstractScrollNode
 javascript
  getTableBody() {
   return this.getTopDownArray()
    .map(node => `<td>${node.getWord(0)}<span>${node.getContent()}</span></td>`)
    .join("\n")
  }
  compile() {
   return `<table class="kpiTable"><tr><tr>${this.getTableBody()}</tr></table>`
  }
tableSearchNode
 crux tableSearch
 extends abstractScrollNode
 description Add table search to the tables
 javascript
  compile() {
    return `
    <script src="../jquery-3.4.1.min.js"></script>
    <script src="../jquery.dataTables.min.js"></script>
    <script>
      $(document).ready( function () {
      const urlSearchParams = new URLSearchParams(window.location.search)
      const params = Object.fromEntries(urlSearchParams.entries())
      $('table').DataTable({"order": [],"paging": false,search:{ search: params.filter || ""}});
    } );
    </script>`
  }
ohayoCodeNode
 extends codeNode
 crux ohayoCode
 description Provide a direct link to analyze this data in Ohayo.
 javascript
  compile() {
   const link = `https://ohayo.computer?filename=${this.getRootNode().permalink}.ohayo&data=${encodeURIComponent(this.childrenToString())}`
    return `<div class="scrollQuoteComponent">Analyze this data yourself in <a href="${link}">Ohayo</a></div>`
  }
observableNode
 extends abstractScrollNode
 crux observable
 cells keywordCell urlCell
 description Provide a direct link to analyze this data in Observable.
 javascript
  compile() {
   return `<div class="scrollQuoteComponent">Analyze this data yourself in <a href="${this.getWord(1)}">Observable</a></div>`
  }
authorNode
 extends abstractScrollNode
 crux author
 cells keywordCell urlCell
 catchAllCellType anyCell
 description The author of a post.
 javascript
  compile() {
   return `<div class="scrollAuthor">by <a href="${this.getWord(1)}">${this.getWordsFrom(2).join(" ")}</a></div>`
  }
howToCiteNode
 crux howToCite
 extends abstractScrollNode
 description Add a "How to cite" block
 javascript
  compile() {
   const article = this.getParent()
   const authors = article.getNode("author").getWordsFrom(2).join(" ") // todo: multiple
   const year = new Date(article.get("date")).getFullYear()
   const title = article.get("title")
   const site = "PLDB.pub"
   const siteName = "PLDB"
   const permalink = this.getRootNode().permalink
   const url = "https://pldb.pub/" + permalink + ".html"
   return `
      <div class="citationSection">
      <h4>How to cite</h4>
      <p>PLDB content is published to the public domain and can be used freely. If needed, here are 3 options for citing PLDB:</p>
      <div class="scrollCiteComponent">${url}</div>
     <div class="scrollCiteComponent">
      ${authors} (${year}) - "${title}". Published online at ${site}. Retrieved from: '${url}' [Online Resource]
     </div>
     <div class="scrollCiteComponent">
     @article{${permalink},
        author = {${authors}},
        title = {${title}},
        journal = {${siteName}},
        year = {${year}},
        note = {${url}}
      }
     </div></div>`
  }