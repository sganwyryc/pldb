appeared 2012
type pl
creators Joe Groff
example
 pad = x flip[stitch] 0, stitch 0, flip[cat] 0, cat 0
 life = pad, neighborhoods[3 3], [ravel, [sum in?: [x @ 4, + 3; 3]]]/2
 
 [0 1 0 1
  0 1 1 0
  0 0 1 0
  0 0 0 0] replicate[life]-times[5]
 ###
 [0 1 0 1
  0 1 1 0
  0 0 1 0
  0 0 0 0
 
  0 1 0 0
  0 1 0 1
  0 1 1 0
  0 0 0 0
 
  0 0 1 0
  1 1 0 0
  0 1 1 0
  0 0 0 0
 
  0 1 0 0
  1 0 0 0
  1 1 1 0
  0 0 0 0
 
  0 0 0 0
  1 0 1 0
  1 1 0 0
  0 1 0 0]
 ###
reference https://gist.github.com/jckarter/2839239
description fml is an optimizing, function-oriented, array programming language. Unlike other array programming languages, it aims to have a less symbol-heavy but still concise syntax, and non-strict semantics that allow for high-level optimization. Note that fml is not: meant for serious use always faster than systems languages like C/C++/etc. always more expressive than general-purpose languages like Python, Javascript, etc. suitable for cryptography, real-time, or low-level applications that require fine control of time and space complexity